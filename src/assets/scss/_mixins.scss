@import "./variables";

// Generals

@mixin HexToRgba($prop, $color, $opacity: 0.3) {
  #{$prop}: $color;
  #{$prop}: rgba($color, $opacity);
}

@function calculateRem($size) {
  $remSize: calc($size / $font-size-base);
  @return #{$remSize}rem;
}

@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@mixin not($selectors...) {
  $selectorResult: ();
  @each $selector in $selectors {
    $selectorResult: append($selectorResult, $selector, $separator: comma);
  }

  &:not(#{$selectorResult}) {
    @content;
  }
}

// Fonts

@mixin headings {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @content;
  }
}

// States

@mixin hover() {
  &:hover {
    @content;
  }
}

@mixin focus() {
  &:focus,
  &:focus-visible,
  &:focus-within {
    @content;
  }
}

@mixin active() {
  &:active {
    @content;
  }
}

@mixin visited() {
  &:visited {
    @content;
  }
}

@mixin allLinksStates() {
  @include hover {
    @content;
  }
  @include active {
    @content;
  }
  @include focus {
    @content;
  }
  @include visited {
  }
}

// Layouts

@mixin flexbox($gap: $gap, $direction: "column") {
  display: flex;
  flex-direction: #{$direction};
  gap: calculateRem($gap);
}

// Styles

@mixin reset() {
  all: unset;
  appearance: none;
  outline: revert;
  box-sizing: border-box;
}

@mixin button-outlined {
  &.outlined {
    background-color: transparent;
    line-height: calculateRem($size-small);
    @include fontSize($size-small);

    @content;
  }
}

@mixin padding($paddings...) {
  $fontSize: $font-size-base;
  $result: ();

  @each $padding in $paddings {
    $result: append($result, calculateRem($padding), $separator: auto);
  }

  padding: $result;
}

@mixin transitions($properties...) {
  $transition: ();
  @each $property in $properties {
    $transition: append($transition, ($property 0.2s cubic-bezier(0.42, 0, 0.58, 1)), $separator: comma);
  }
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin mobile-up {
  @media only screen and (min-width: 576px) {
    @content;
  }
}

@mixin tablet-portrait {
  @media only screen and (min-width:768px) {
    @content;
  }
}

@mixin tablet-landscape {
  @media only screen and (min-width:992px) {
    @content;
  }
}

@mixin desktop {
  @media only screen and (min-width:1200px) {
    @content;
  }
}

%container {
  margin: 0 auto;
  padding: 0 calculateRem(20px);

  @include mobile-up {
    max-width: calculateRem($width-mobile);
  }

  @include tablet-portrait {
    max-width: calculateRem($width-tablet-portrait);
  }

  @include tablet-landscape {
    max-width: calculateRem($width-tablet-landscape);
  }

  @include desktop {
    max-width: calculateRem($width-desktop);
  }
}
